#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "commons.h"
#include "utils.glsl"

layout(location = 0) rayPayloadEXT HitPayload payload;
layout(location = 1) rayPayloadEXT AnyHitPayload any_hit_payload;
layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 0, binding = 2) readonly buffer InstanceInfo_ {
    PrimMeshInfo prim_info[];
};
layout(set = 0, binding = 3) readonly buffer Lights { MeshLight lights[]; };
layout(set = 1, binding = 0) uniform SceneUBOBuffer { SceneUBO ubo; };
layout(set = 1, binding = 1, scalar) buffer SceneDesc_ {
    SceneDesc scene_desc;
};
layout(set = 1, binding = 2) uniform sampler2D textures[];
layout(buffer_reference, scalar) readonly buffer Vertices { vec3 v[]; };
layout(buffer_reference, scalar) readonly buffer Indices { uint i[]; };
layout(buffer_reference, scalar) readonly buffer Normals { vec3 n[]; };
layout(buffer_reference, scalar) readonly buffer TexCoords { vec2 t[]; };
layout(buffer_reference, scalar) readonly buffer Materials {
    GLTFMaterial m[];
};
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };

#define MAX_DEPTH 10
#define MIN_DEPTH 3
#define NEE 1
#define MIS 1
#define EPS 0.001
#define SAMPLE_VISIBLE_LIGHTS 2
#define MAX_LIGHT_SAMPLES 8
#define MAX_LIGHTS 12

Indices indices = Indices(scene_desc.index_addr);
Vertices vertices = Vertices(scene_desc.vertex_addr);
Normals normals = Normals(scene_desc.normal_addr);
Materials materials = Materials(scene_desc.material_addr);

vec3 eval_material_opaque(GLTFMaterial m, vec2 uv) {
    vec3 albedo = m.base_color_factor.xyz;
    if (m.texture_id > -1) {
        albedo *= texture(textures[m.texture_id], uv).xyz;
    }
    return albedo;
}

vec3 sample_cos_hemisphere(vec2 uv, vec3 n) {
    float phi = PI2 * uv.x;
    float cos_theta = 2.0 * uv.y - 1.0;
    return normalize(
        n + vec3(sqrt(1.0 - cos_theta * cos_theta) * vec2(cos(phi), sin(phi)),
                 cos_theta));
}

TriangleRecord sample_triangle(PrimMeshInfo pinfo, vec2 rands,
                               uint triangle_idx, in mat4 world_matrix) {
    TriangleRecord result;
    uint index_offset = pinfo.index_offset + 3 * triangle_idx;
    uint vertex_offset = pinfo.vertex_offset;
    ivec3 ind = ivec3(indices.i[index_offset + 0], indices.i[index_offset + 1],
                      indices.i[index_offset + 2]);
    ind += ivec3(vertex_offset);
    const vec4 v0 = vec4(vertices.v[ind.x], 1.0);
    const vec4 v1 = vec4(vertices.v[ind.y], 1.0);
    const vec4 v2 = vec4(vertices.v[ind.z], 1.0);

    const vec4 n0 = vec4(normals.n[ind.x], 1.0);
    const vec4 n1 = vec4(normals.n[ind.y], 1.0);
    const vec4 n2 = vec4(normals.n[ind.z], 1.0);
    //    mat4x3 matrix = mat4x3(vec3(world_matrix[0]), vec3(world_matrix[1]),
    //                           vec3(world_matrix[2]), vec3(world_matrix[3]));
    mat4x4 inv_tr_mat = transpose(inverse(world_matrix));
    //    mat4x3 nrm_mat = mat4x3(vec3(inv_tr_mat[0]), vec3(inv_tr_mat[1]),
    //                            vec3(inv_tr_mat[2]), vec3(inv_tr_mat[3]));
    float u = 1 - sqrt(rands.x);
    float v = rands.y * sqrt(rands.x);
    const vec3 barycentrics = vec3(1.0 - u - v, u, v);

    const vec4 vtmp0 = world_matrix * v0;
    const vec4 vtmp1 = world_matrix * v1;
    const vec4 vtmp2 = world_matrix * v2;
    const vec4 etmp0 = vtmp1 - vtmp0;
    const vec4 etmp1 = vtmp2 - vtmp0;
    const vec4 pos =
        v0 * barycentrics.x + v1 * barycentrics.y + v2 * barycentrics.z;
    const vec4 nrm = normalize(n0 * barycentrics.x + n1 * barycentrics.y +
                               n2 * barycentrics.z);
    const vec4 world_pos = world_matrix * pos;

    result.triangle_normal = normalize(vec3(inv_tr_mat * nrm));
    result.triangle_pdf = 2. / length((cross(vec3(etmp0), vec3(etmp1))));
    result.pos = vec3(world_pos);
    return result;
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec4 direction = ubo.inv_view * vec4(normalize(target.xyz), 0);

    uint flags = gl_RayFlagsOpaqueEXT;
    float tmin = 0.001;
    float tmax = 10000.0;

    vec3 col = vec3(0);
    vec3 throughput = vec3(1., 1., 1.);
    const vec3 sky_col = vec3(0., 0., 0.);
    uvec4 seed =
        init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.frame_num);
    float brdf_pdf;
    for (int depth = 0; depth < MAX_DEPTH; depth++) {
        traceRayEXT(tlas,          // acceleration structure
                    flags,         // rayFlags
                    0xFF,          // cullMask
                    0,             // sbtRecordOffset
                    0,             // sbtRecordStride
                    0,             // missIndex
                    origin.xyz,    // ray origin
                    tmin,          // ray min range
                    direction.xyz, // ray direction
                    tmax,          // ray max range
                    0              // payload (location = 0)
        );
        vec3 shading_normal = payload.shading_nrm;
        vec3 geometry_normal = payload.geometry_nrm;
        if (payload.material_idx == -1) {
            col += throughput * sky_col;
            break;
        }

        GLTFMaterial mat = materials.m[payload.material_idx];
#if NEE == 0
        col += throughput * mat.emissive_factor;

#else
        if (depth == 0) {
            col += throughput * mat.emissive_factor;
        } else {
    #if MIS
            float mis_light_pdf = pc_ray.total_light_area == 0 ? 0 : 1. / (pc_ray.total_light_area);
            float dist_sqr =
                dot(payload.pos - origin.xyz, payload.pos - origin.xyz);
            float mis_brdf_pdf =
                brdf_pdf * abs(dot(direction.xyz, shading_normal)) / dist_sqr;
            float mis_weight = mis_brdf_pdf / (mis_light_pdf + mis_brdf_pdf);
            col += throughput * mis_weight * mat.emissive_factor;
    #endif
        }
#endif
        if (depth == MAX_DEPTH - 1)
            break;

        if (depth > MIN_DEPTH) {
            float rr_prob = min(0.95f, luminance(throughput));
            if (rr_prob < rand(seed))
                break;
            else
                throughput /= rr_prob;
        }
        vec3 v = -direction.xyz;

        if (dot(geometry_normal, v) < 0.)
            geometry_normal = -geometry_normal;
        float cos_theta = dot(v, shading_normal);
        if (cos_theta < 0) {
            cos_theta = -cos_theta;
            shading_normal = -shading_normal;
        }
        if (dot(geometry_normal, v) * dot(shading_normal, v) < 0) {
            // We dont handle BTDF at the moment
            break;
        }
        vec3 lambertian_brdf = eval_material_opaque(mat, payload.uv);
        throughput *= lambertian_brdf;
        origin.xyz = offset_ray(payload.pos, geometry_normal);
        direction.xyz =
            sample_cos_hemisphere(vec2(rand(seed), rand(seed)), shading_normal);
        brdf_pdf = cos_theta / PI;
#if NEE == 1
        if(pc_ray.num_mesh_lights == 0) {
            continue;
        }
        uint mesh_light_idx = uint(rand(seed) * pc_ray.num_mesh_lights);
        MeshLight light = lights[mesh_light_idx];
//        if(gl_LaunchIDEXT.x == 300 && gl_LaunchIDEXT.y == 214){
//            debugPrintfEXT("%d\n", mesh_light_idx);
//        }
        uint light_idx = light.prim_mesh_idx;
        PrimMeshInfo pinfo = prim_info[light_idx];
        float weights[MAX_LIGHTS];
        float cdfs[MAX_LIGHTS];
        GLTFMaterial light_mat = materials.m[light_idx];
    #if SAMPLE_VISIBLE_LIGHTS == 1
        float weight_sum = 0.;
        float total_area = 0.;
        for (int i = 0; i < light.num_triangles; i++) {
            vec2 rands = vec2(rand(seed), rand(seed));
            TriangleRecord record = 
                sample_triangle(pinfo, rands, i, light.world_matrix);
            vec3 ray_dir = origin.xyz - record.pos;
            float area = 1. / record.triangle_pdf;
            float cos_x = dot(ray_dir, shading_normal);
            float cos_y = dot(ray_dir, record.triangle_normal);
            if (cos_y >= 0) {
                float len = length(ray_dir);
                ray_dir /= len;
                weights[i] = abs(cos_x) * cos_y / (len * len);
                weight_sum += weights[i];
            } else {
                weights[i] = 0.;
            }
        }
        cdfs[0] = weights[0] / weight_sum;
        for (int i = 1; i < light.num_triangles; i++) {
            cdfs[i] = weights[i] / weight_sum + cdfs[i - 1];
        }

        float random_float = rand(seed);
        // Binary search through the CDF
        uint l = 0;
        uint r = light.num_triangles;
        uint idx;
        while (l <= r) {
            uint m = (r + l) / 2;
            if (cdfs[m] < random_float && m < light.num_triangles) {
                l = m + 1;
            } else {
                if (m == 0) {
                    idx = 0;
                    break;
                }
                if (cdfs[m - 1] <= random_float) {
                    idx = m;
                    break;
                }
                r = m - 1;
            }
        }
        uint triangle_idx = idx;

    #elif SAMPLE_VISIBLE_LIGHTS == 2
        int visible_lights = 0;
        uint indices[MAX_LIGHT_SAMPLES];
        for (int i = 0; i < MAX_LIGHT_SAMPLES; i++) {
            uint triangle_idx = uint(rand(seed) * light.num_triangles);
            vec2 rands = vec2(rand(seed), rand(seed));
            TriangleRecord record =
                sample_triangle(prim_info[light_idx], rands, triangle_idx,
                            light.world_matrix);
            vec3 ray_dir = origin.xyz - record.pos;
            if (dot(ray_dir, record.triangle_normal) > 0) {
                ray_dir /= length(ray_dir);
                indices[visible_lights] = triangle_idx;
                visible_lights++;
            }
        }
        uint triangle_idx = uint(rand(seed) * visible_lights);
        triangle_idx = indices[triangle_idx];

    #else
        uint triangle_idx = uint(rand(seed) * light.num_triangles);
    #endif
        vec2 rands = vec2(rand(seed), rand(seed));
        light_idx = light.prim_mesh_idx;
        TriangleRecord record =
            sample_triangle(prim_info[light_idx], rands, triangle_idx,
                            light.world_matrix);
        // TODO: All emissive triangles
        vec3 shadow_ray_dir = record.pos - payload.pos;
        float ray_len = length(shadow_ray_dir);
        shadow_ray_dir /= ray_len;
        float cos_x = dot(shadow_ray_dir, shading_normal);
        if (cos_x > 0.0) {
            any_hit_payload.hit = 1;
            traceRayEXT(tlas, // acceleration structure
                        gl_RayFlagsTerminateOnFirstHitEXT |
                            gl_RayFlagsSkipClosestHitShaderEXT,
                        0xFF,           // cullMask
                        1,              // sbtRecordOffset
                        0,              // sbtRecordStride
                        1,              // missIndex
                        origin.xyz,     // ray origin
                        0,              // ray min range
                        shadow_ray_dir, // ray direction
                        ray_len - EPS,  // ray max range
                        1               // payload (location = 1)
            );
            float cos_y = abs(dot(-shadow_ray_dir, record.triangle_normal));
            float triangle_pdf = record.triangle_pdf;
    #if SAMPLE_VISIBLE_LIGHTS == 1
            triangle_pdf = triangle_pdf * weights[triangle_idx] / weight_sum;
    #elif SAMPLE_VISIBLE_LIGHTS == 2
            triangle_pdf =
                visible_lights > 0 ? 1. / visible_lights * triangle_pdf : 0;
    #else
            triangle_pdf *= 1.0 / light.num_triangles;
    #endif
            bool visibility = (any_hit_payload.hit == 0);
            if (visibility && triangle_pdf > 0) {
                // Geometric term
                float G = abs(cos_x * cos_y) / (ray_len * ray_len);
                float mis_brdf_pdf = G / PI;
                // Balance heuristic
                float mis_weight =
                    MIS == 1 ? triangle_pdf / (triangle_pdf + mis_brdf_pdf) : 1;
                col += 1.0 / PI * mis_weight * light_mat.emissive_factor *
                       throughput * G / (triangle_pdf);
            }
        }
#endif
    }
    if (pc_ray.frame_num > 0) {
        float w = 1. / float(pc_ray.frame_num + 1);
        vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy),
                   vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
    }
}