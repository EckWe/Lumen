#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
// VCM buffers
layout(buffer_reference, scalar) buffer VCMReservoir_ { VCMReservoir d[]; };
layout(buffer_reference, scalar) buffer ShouldResample { uint d; };
layout(buffer_reference, scalar) buffer LightStates { LightState d[]; };

ShouldResample should_resample =
    ShouldResample(scene_desc.should_resample_addr);
LightStates light_states = LightStates(scene_desc.light_state_addr);

VCMReservoir_ temporal_reservoirs =
    VCMReservoir_(scene_desc.vcm_reservoir_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc_ray.total_frame_num ^ pc_ray.random_num);
uint vcm_light_path_idx =
    (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y) *
    (pc_ray.max_depth);

const uint FRAME_INTERVAL = 10;

uint restir_hash(ivec3 p, uint size) {
    return uint((p.x * 73856093) ^ (p.y * 19349663) ^ p.z * 83492791) % size;
}

vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

uint get_restir_hash_idx(uint light_idx, float u, float v) {
    const int base_res =
        int(sqrt(float(screen_size) / pc_ray.light_triangle_count));
    ivec3 grid_res = ivec3(pc_ray.light_triangle_count, base_res, base_res);
    ivec3 grid_idx =
        get_grid_idx(vec3(light_idx, u, v), vec3(0, 0, 0),
                     vec3(pc_ray.light_triangle_count, 1, 1), grid_res);
    return restir_hash(grid_idx, screen_size);
}

bool vcm_generate_light_sample(out LightState light_state) {
    // Sample light
    // uint light_idx = uint(rand(seed) * pc_ray.light_triangle_count);
    // uint light_triangle_idx;
    // uint light_material_idx;
    // vec2 uv_unused;
    // const vec2 rands = vec2(rand(seed), rand(seed));
    // vec3 light_min_pos;
    // vec3 light_max_pos;
    // float u, v;
    // const TriangleRecord record =
    //     sample_area_light_with_idx(rands, 0, light_idx, light_material_idx,
    //                                light_min_pos, light_max_pos, u, v);
    // vec3 wi = sample_cos_hemisphere(vec2(rand(seed), rand(seed)),
    //                                 record.n_s);
    uint light_idx;
    uint light_triangle_idx;
    uint light_material_idx;
    vec2 uv_unused;
    Light light;
    TriangleRecord record;
    Material light_mat;
    float u, v;
    vec3 wi;
    float pdf_pos, pdf_dir, phi;
    const vec3 Le = sample_light_Le(
        pc_ray.num_lights, pc_ray.light_triangle_count, light_idx,
        light_triangle_idx, light_material_idx, light, record, light_mat,
        pdf_pos, seed, wi, pdf_dir, phi, u, v);
    if (pdf_dir <= 0) {
        return false;
    }
    light_state.pos = record.pos;
    light_state.normal = record.n_s;
    light_state.dir = wi;
    light_state.triangle_pdf = record.triangle_pdf;
    light_state.hash_idx = get_restir_hash_idx(light_idx, u, v);
    light_state.Le = Le;
    light_state.light_flags = light.light_flags;
    return true;
}

void main() {
    LightState light_state;
    bool generate_samples = true;
    if (vcm_generate_light_sample(light_state)) {
        if (should_resample.d == 0 && pc_ray.do_spatiotemporal == 1) {
            temporal_reservoirs.d[light_state.hash_idx].selected_idx =
                pixel_idx;
        }
        light_states.d[pixel_idx] = light_state;
    }
}