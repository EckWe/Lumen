#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
layout(buffer_reference, scalar) buffer RestirSamples { ReservoirSample d[]; };
layout(buffer_reference, scalar) buffer Reservoirs { Reservoir d[]; };
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
#define M_MAX 30
#define M_MAX_S 500
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed =
    init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy, pc_ray.total_frame_num);

RestirSamples samples = RestirSamples(scene_desc.restir_samples_addr);
RestirSamples old_samples = RestirSamples(scene_desc.restir_samples_old_addr);
Reservoirs temp_reservoirs = Reservoirs(scene_desc.temporal_reservoir_addr);
Reservoirs spatial_reservoirs = Reservoirs(scene_desc.spatial_reservoir_addr);
void init_s(out ReservoirSample s) {
    s.x_v = vec3(0);
    s.n_v = vec3(0);
    s.x_s = vec3(0);
    s.n_s = vec3(0);
    s.L_o = vec3(0);
    s.f = vec3(0);
    s.p_q = 0;
}

void init_reservoir(out Reservoir r) {
    r.w_sum = 0;
    r.W = 0;
    r.m = 0;
    init_s(r.s);
}

/*void update_reservoir(inout Reservoir r, const ReservoirSample s, float w_i) {
    r.w_sum += w_i;
    r.m++;
    if (rand(seed) <= w_i / r.w_sum) {
        r.s = s;
        //float l1 = length(s.n_s);
    }
}*/

// TODO change into general version
void update_reservoir(inout Reservoir r, inout float w_sum, const ReservoirSample s, in float w_i) {
    w_sum += w_i;
    r.m++;
    if (rand(seed) * w_sum <= w_i) {
        r.s = s;
    }
}

bool merge_reservoir(inout Reservoir r_dest, inout Reservoir r_src, in float w_i, inout float w_sum) {
    w_sum += w_i;
    r_dest.m += r_src.m;
    if (rand(seed) * w_sum <= w_i) {
        r_dest.s.x_s = r_src.s.x_s;
        r_dest.s.n_s = r_src.s.n_s;
        r_dest.s.L_o = r_src.s.L_o;
        return true;
    }
    return false;
}


float target_function(in vec3 radiance, in vec3 sample_pos, in vec3 pos, in vec3 normal, in vec3 bsdf_factor) {

    const vec3 direction_sample = normalize(sample_pos - pos);
    const float cosine_factor = abs(dot(direction_sample, normal));
    
    return luminance(radiance * bsdf_factor) * cosine_factor;
}

float target_function_test(in vec3 radiance, in vec3 sample_pos, in vec3 pos, in vec3 normal) {

    const vec3 direction = normalize(sample_pos - pos);
    const float cosine_factor = clamp(dot(direction, normal), 0.f, 1.f);
    //const float cosine_factor = abs(dot(direction, normal));
    const float brdf = cosine_factor * INV_PI;
    const float cosine = max(0.1f, brdf * cosine_factor);
    return luminance(radiance * cosine);
}

float target_function_simple(in vec3 radiance, in vec3 bsdf_factor, in float cosine_factor) {
    return luminance(radiance);
}

float p_hat(const vec3 f) { return length(f); }

uint offset(const uint pingpong) {
    return pingpong * pc_ray.size_x * pc_ray.size_y;
}

bool similar_projection(float view_depth, float view_depth_prev) {
    
    return true;//view_depth / view_depth_prev > 0.98f;
}

bool similar_spatial(vec3 normal, vec3 neighbor_normal, float depth, float neighbor_depth) {
    // % relative difference
    float depth_threshold = 0.1f;
    // TODO test different values
    float normal_threshold = 0.9f;
    float diff = abs(depth - neighbor_depth);
    float normal_dot = dot(normal, neighbor_normal);
    return diff / depth <= depth_threshold && normal_dot >= normal_threshold;
}


bool similar(ReservoirSample q, ReservoirSample q_n) {
    const float depth_threshold = 0.5;
    const float angle_threshold = 25 * PI / 180;
    if (q.mat_idx != q_n.mat_idx ||
        dot(q_n.n_v, q.n_v) < cos(angle_threshold)) {
        return false;
    }
    return true;
}


bool eval_visibility(in vec3 origin, in vec3 segment_end, bool transmissive_origin) {

    vec3 dir = segment_end - origin;
    const float len = length(dir);
    dir /= len;
    bool visible = true;

    if (!transmissive_origin) {
        any_hit_payload.hit = 1;
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, origin, 0, dir, len - EPS, 1);
        visible = any_hit_payload.hit == 0;
    }
    return visible;
}


//#define tr temp_reservoirs.d[current_pingpong_offset + pixel_idx]
#define tr temp_reservoirs.d[0 + pixel_idx]
void main() {
    const uint current_pingpong_offset = 0;//offset(pc_ray.total_frame_num % 2);
    const uint prev_pingpong_offset = current_pingpong_offset == 0 ? offset(1) : 0;
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const ReservoirSample s = samples.d[pixel_idx];

    if(gl_LaunchIDEXT.x == 700 && gl_LaunchIDEXT.y == 600 && pc_ray.frame_num < 3) {
       // debugPrintfEXT("test \n");
    }
    
    /*vec4 prev_clip = ubo.prev_projection * ubo.prev_view * vec4(s.x_v, 1);
    vec3 prev_ndc = prev_clip.xyz / prev_clip.w;
    vec2 prev_uv = (prev_ndc.xy + 1.f) * 0.5f;
    vec2 prev_pixel = vec2(prev_uv * gl_LaunchSizeEXT.xy);
    vec4 prev_pos = ubo.prev_view * vec4(s.x_v, 1);
    prev_pos /= prev_pos.z;
    prev_pos = -ubo.prev_projection * prev_pos;
    const vec2 prev_ndc = prev_pos.xy;
    ivec2 prev_pixel = ivec2(0.5f * (1.f + prev_ndc) * gl_LaunchSizeEXT.xy);*/

    /*if(gl_LaunchIDEXT.x == 700 && gl_LaunchIDEXT.y == 600) {
                /*debugPrintfEXT("reprojected %f, %f, %f .. %f, %f, %f .. %f, %f, %f \n", ubo.prev_projection[0][0], ubo.projection[0][0], ubo.prev_view[2][0], 
                ubo.prev_view[0][1], ubo.prev_view[1][1], ubo.prev_view[2][1], 
                ubo.prev_view[0][2], ubo.prev_view[1][2], ubo.prev_view[2][2]);
                debugPrintfEXT("reprojected %f, %f .. %f, %f \n", prev_ndc.x, prev_ndc.y, prev_pixel.x, prev_pixel.y);
                debugPrintfEXT("%d, %d, %u, %d", gl_LaunchIDEXT.x, gl_LaunchIDEXT.y, pixel_idx, gl_LaunchSizeEXT.y);
    }*/

    Reservoir r;
    /*if (length(s.n_s) == 0) {
        init_reservoir(r);
        tr.w_sum = r.w_sum;
        tr.W = r.W;
        tr.m = r.m;
        tr.s = r.s;
        spatial_reservoirs.d[offset(pingpong ^ 1) + pixel_idx] = r;
        return;
    }*/
    if (pc_ray.do_spatiotemporal == 0) {
        init_reservoir(r);
    /*} else {
        vec4 prev_pos = ubo.prev_view * vec4(s.x_v, 1.f);
        prev_pos /= prev_pos.z;
        prev_pos = -ubo.prev_projection * prev_pos;
        const vec2 prev_ndc = prev_pos.xy;
        ivec2 prev_coords = ivec2(0.5f * (1.f + prev_ndc) * gl_LaunchSizeEXT.xy);

        //if(gl_LaunchIDEXT.x == 50 && gl_LaunchIDEXT.y == 50 && pc_ray.frame_num < 5) {
        //        debugPrintfEXT("%d, %d, %f, %f, %f\n", prev_coords.x, prev_coords.y, ubo.view_pos.z, length(s.x_v - ubo.view_pos.xyz), length(s.x_v - ubo.prev_view_pos.xyz));
        //    }

        bool reprojection_failed = true;
        uint prev_coords_idx;
        if (prev_coords.x >= 0 && prev_coords.x < gl_LaunchSizeEXT.x &&
            prev_coords.y >= 0 && prev_coords.y < gl_LaunchSizeEXT.y) {
            prev_coords_idx = prev_coords.x * gl_LaunchSizeEXT.y + prev_coords.y;
            if (similar_projection(length(s.x_v - ubo.view_pos.xyz), length(s.x_v - ubo.prev_view_pos.xyz))) {
            //if (similar(samples.d[prev_coords_idx], old_samples.d[pixel_idx])) {
                reprojection_failed = false;

            }
        }
        if (!reprojection_failed) {
            r = temp_reservoirs.d[current_pingpong_offset + prev_coords_idx];
            if (r.s.x_v == s.x_v && ubo.prev_view_pos.xyz != ubo.view_pos.xyz) {
                //debugPrintfEXT("test\n");
            }
            
        } else {
            // Reprojection failed, reset both reservoirs
            // Temporal
            init_reservoir(r);
            // Spatial
            spatial_reservoirs.d[current_pingpong_offset + pixel_idx] = r;
        }*/
    }
    else {
        r = temp_reservoirs.d[offset(0) + pixel_idx];
    }


    /*if(gl_LaunchIDEXT.x == 700 && gl_LaunchIDEXT.y == 600 && (pc_ray.frame_num < 5)) {
        //float lum = luminance(s.L_o);
        debugPrintfEXT("%f\n", s.f);
        debugPrintfEXT("%f\n", phat);
        debugPrintfEXT("%f, %f, %f\n", s.L_o.x, s.L_o.y, s.L_o.z);
        debugPrintfEXT("%f, %f, %f\n", tr.s.L_o.x, tr.s.L_o.y, tr.s.L_o.z);
        debugPrintfEXT("123\n");
    }*/
    
    //float tf = evalTargetFunction(temporalReservoir.radiance, worldNormal, worldPosition, temporalReservoir.position, evalContext);




    // TODO add jacobian
    float temp_tf = target_function(r.s.L_o, r.s.x_s, r.s.x_v, r.s.n_v, r.s.f);
    //float temp_tf = target_function_test(r.s.L_o, r.s.x_s, r.s.x_v, r.s.n_v);
    float sample_tf = target_function(s.L_o, s.x_s, s.x_v, s.n_v, s.f);
    //float sample_tf = target_function_test(s.L_o, s.x_s, s.x_v, s.n_v);

    float jacobian = 1.f;


    


    // w
    
    
    float wi = s.p_q <= 0.f ? 0.f : sample_tf / s.p_q;

    float w_sum = r.w_sum * r.m;
    //updateReservoir(wi, initialSample, sg, wSum, temporalReservoir);
    update_reservoir(r, w_sum, s, wi);
    w_sum /= r.m;
    r.m = min(r.m, M_MAX);
    tr.W = temp_tf <= 0.f ? 0.f : w_sum / temp_tf;
    

    //float avg_w_sum = w_sum / r.m;
    //r.w_sum = temp_tf <= 0.f ? 0.f : avg_w_sum / temp_tf;
    // TODO add age
    // TODO Clamp M
    // TODO update x_v and n_v because of shift
    
    
    
    // set temporal reservoir
    tr.w_sum = w_sum;
    //tr.W = r.w_sum;
    tr.m = r.m;
    tr.s = r.s;

    /*if(gl_LaunchIDEXT.x == 700 && gl_LaunchIDEXT.y == 600 && pc_ray.frame_num < 10 && s.L_o.x > 0) {
        
        debugPrintfEXT("%f\n", r.s.L_o.x);
        debugPrintfEXT("%f\n", wi);
        debugPrintfEXT("%f, %f, %f\n", s.L_o.x, s.L_o.y, s.L_o.z);
        debugPrintfEXT("%f\n", tr.W);
        debugPrintfEXT("%f\n", tr.m);
        debugPrintfEXT("%f\n", tr.w_sum);
        debugPrintfEXT("%f\n", temp_tf);
        debugPrintfEXT("%u\n", pc_ray.frame_num);
    }*/
   
    
    //spatial reservoirs
    // TODO UNCOMMENT
    /*Reservoir spatial_reservoir;

    if (pc_ray.do_spatiotemporal == 0) {
        init_reservoir(spatial_reservoir);
    }
    else {
        spatial_reservoir = spatial_reservoirs.d[prev_pingpong_offset + pixel_idx];
    }


    const float high_reuse_ratio = 0.5f;
    const float high_threshold = M_MAX_S * high_reuse_ratio;
    const int iteration_count = 3;
    const int high_iteration_count = 10;


    const int spatial_iterations = spatial_reservoir.m > high_threshold ? iteration_count : high_iteration_count;

    const float search_radius_ratio = 0.1f;
    float search_radius = gl_LaunchSizeEXT.x * search_radius_ratio;
    const float radius_shrink_ratio = 0.5f;
    const float min_search_radius = 10.f;


    vec3 neighbors_x_v[10];
    vec3 neighbors_n_v[10];
    uint neighbors_m[10];

    int reuse_idx = 0;
    int merged_spatial_id = 0;

    neighbors_x_v[reuse_idx] = s.x_v;
    neighbors_n_v[reuse_idx] = s.n_v;

    neighbors_m[reuse_idx] = spatial_reservoir.m;
    reuse_idx++;

    float w_sum_spatial = spatial_reservoir.W * spatial_reservoir.m * target_function(spatial_reservoir.s.L_o, spatial_reservoir.s.x_s, spatial_reservoir.s.x_v, spatial_reservoir.s.n_v, spatial_reservoir.s.f);
    // creation position stays the same, watch out when resampling
    spatial_reservoir.s.x_v = s.x_v;
    spatial_reservoir.s.n_v = s.n_v;

    

    Reservoir neighbor_reservoir;

    for (int i = 0; i < spatial_iterations; i++) {
        
        search_radius = max(search_radius * radius_shrink_ratio, min_search_radius);
        // TODO check if has to be at least 1
        const vec2 radius_offset = (vec2(rand(seed), rand(seed)) * 2.f - 1.f) * search_radius;
        ivec2 neighbor_pixel = ivec2(pixel + radius_offset);

        // handle image boundary edge case
        const ivec2 boundary = ivec2(gl_LaunchSizeEXT.xy);
        neighbor_pixel.x = neighbor_pixel.x < 0 ? -neighbor_pixel.x : (neighbor_pixel.x > boundary.x ? boundary.x - (neighbor_pixel.x - boundary.x) : neighbor_pixel.x);
        neighbor_pixel.y = neighbor_pixel.y < 0 ? -neighbor_pixel.y : (neighbor_pixel.y > boundary.y ? boundary.y - (neighbor_pixel.y - boundary.y) : neighbor_pixel.y);
        // TODO CHECK IF THIS IDX IS RIGHT
        const uint neighbor_idx = neighbor_pixel.x * gl_LaunchSizeEXT.y + neighbor_pixel.y;
        // TODO consider reprojection
        neighbor_reservoir = temp_reservoirs.d[prev_pingpong_offset + neighbor_idx];//spatial_reservoirs.d[prev_pingpong_offset + pixel_idx];

        //float similarity_normal = dot(neighbor_reservoir.s.n_v, spatial_reservoir.s.n_v);
        //float similarity_depth = abs(neighbor_reservoir.s.depth_v - spatial_reservoir.s.depth_v);

        if (!similar_spatial(spatial_reservoir.s.n_v, neighbor_reservoir.s.n_v, spatial_reservoir.s.depth_v, neighbor_reservoir.s.depth_v) || neighbor_reservoir.m <= 0) {
            continue;
        }
            
        vec3 vector_neighbor = neighbor_reservoir.s.x_s - neighbor_reservoir.s.x_v;
        vec3 vector_connect = neighbor_reservoir.s.x_s - spatial_reservoir.s.x_v;

        float connect_tf = target_function(neighbor_reservoir.s.L_o, neighbor_reservoir.s.x_s, spatial_reservoir.s.x_v, spatial_reservoir.s.n_v, s.f);
        // occluded connection?
        if (dot(spatial_reservoir.s.n_v, vector_connect) <= 0.f) {
            connect_tf = 0.f;
        }
        // prep jacobian
        float square_mag_neighbor = dot(vector_neighbor, vector_neighbor);
        float square_mag_connect = dot(vector_connect, vector_connect);
        vector_neighbor = normalize(vector_neighbor);
        vector_connect = normalize(vector_connect);
        float cos_neighbor = dot(neighbor_reservoir.s.n_v, vector_neighbor);
        float cos_connect = dot(neighbor_reservoir.s.n_v, vector_connect);
        
        float cos_phi_neighbor = -dot(vector_neighbor, neighbor_reservoir.s.n_v);
        float cos_phi_connect = -dot(vector_connect, neighbor_reservoir.s.n_v);

        // TODO check this shouldn't go in here
        if (cos_neighbor <= 0.f || cos_phi_neighbor <= 0.f) {
            continue;
        }
        // occluded connection?
        if (cos_connect <= 0.f || cos_phi_connect <= 0.f) {
            connect_tf = 0.f;
        }

        //TODO Visibility check on vector_connect
        bool connection_unoccluded = eval_visibility(spatial_reservoir.s.x_v, neighbor_reservoir.s.x_s, (s.bsdf_props & BSDF_TRANSMISSIVE) == BSDF_TRANSMISSIVE);

        if (!connection_unoccluded) {
            connect_tf = 0.f;
        }
        // TODO test clamped jacobian
        float jacobian = square_mag_connect * cos_phi_neighbor <= 0.f ? 0.f : square_mag_neighbor * cos_phi_connect / (square_mag_connect * cos_phi_neighbor);
        float wi_neighbor = neighbor_reservoir.W * connect_tf * neighbor_reservoir.m * jacobian;

        bool merged = merge_reservoir(spatial_reservoir, neighbor_reservoir, wi_neighbor, w_sum_spatial);
        if (merged) {
            merged_spatial_id = reuse_idx;
        }

        neighbors_x_v[reuse_idx] = neighbor_reservoir.s.x_v;
        neighbors_n_v[reuse_idx] = neighbor_reservoir.s.n_v;
        neighbors_m[reuse_idx] = neighbor_reservoir.m;
        reuse_idx++;

        const float radius_expand_ratio = 3.f;
        search_radius *= radius_expand_ratio;
    }

    // unbiased
    // TODO test and then move variable
    const bool use_MIS_weight = false;

    float Z;

    float total_weight = 0.f;
    float chosen_weight = 0.f;*/
}