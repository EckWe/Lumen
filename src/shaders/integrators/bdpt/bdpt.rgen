#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
// BDPT buffers
layout(buffer_reference, scalar) buffer LightVertices { PathVertex d[]; };
layout(buffer_reference, scalar) buffer CameraVertices { PathVertex d[]; };
layout(buffer_reference, scalar) buffer ColorStorages { vec3 d[]; };

LightVertices light_verts = LightVertices(scene_desc.light_path_addr);
CameraVertices camera_verts = CameraVertices(scene_desc.camera_path_addr);
ColorStorages tmp_col = ColorStorages(scene_desc.color_storage_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
uint bdpt_path_idx =
    (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y) *
    (pc_ray.max_depth + 1);

const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc_ray.frame_num ^ pc_ray.time);

int bdpt_random_walk(const int max_depth, vec3 throughput, const float pdf,
                     const int type) {
#define vtx(i, prop)                                                           \
    (type == 0 ? light_verts.d[bdpt_path_idx + i + 1].prop                     \
               : camera_verts.d[bdpt_path_idx + i + 1].prop)
#define vtx_assign(i, prop, expr)                                              \
    type == 0 ? light_verts.d[bdpt_path_idx + i + 1].prop = (expr)             \
              : camera_verts.d[bdpt_path_idx + i + 1].prop = (expr)

    if (max_depth == 0)
        return 0;
    int b = 0;
    int prev = 0;
    const uint flags = gl_RayFlagsOpaqueEXT;
    const float tmin = 0.001;
    const float tmax = 10000.0;
    vec3 ray_pos = vtx(-1, pos);
    float pdf_fwd = pdf;
    float pdf_rev = 0.;
    vec3 wi = vtx(-1, dir);
    while (true) {
        prev = b - 1;
        traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, ray_pos, tmin, wi, tmax, 0);
        if (payload.material_idx == -1) {
            if (type == 1) {
                vtx_assign(b, throughput, throughput);
                vtx_assign(b, pdf_fwd, pdf_fwd);
                b++;
            }

            break;
        }
        vec3 wo = vtx(prev, pos) - payload.pos;
        float wo_len = length(wo);
        wo /= wo_len;
        vec3 n_s = payload.n_s;
        bool side = true;
        vec3 n_g = payload.n_g;
        if (dot(payload.n_g, wo) < 0.)
            n_g = -n_g;
        if (dot(n_g, n_s) < 0) {
            n_s *= -1;
            side = false;
        }
        vtx_assign(b, pdf_fwd,
                   pdf_fwd * abs(dot(wo, n_s)) / (wo_len * wo_len));
        vtx_assign(b, n_s, n_s);
        vtx_assign(b, area, payload.area);
        vtx_assign(b, pos, payload.pos);
        vtx_assign(b, uv, payload.uv);
        vtx_assign(b, material_idx, payload.material_idx);
        vtx_assign(b, throughput, throughput);
        const Material mat =
            load_material(payload.material_idx, payload.uv);
        const bool mat_specular =
            (mat.bsdf_props & BSDF_SPECULAR) == BSDF_SPECULAR;
        const bool mat_transmissive =
            (mat.bsdf_props & BSDF_TRANSMISSIVE) == BSDF_TRANSMISSIVE;
        vtx_assign(b, delta, int(mat_specular));

        if (++b >= max_depth) {
            break;
        }

        float cos_theta;
        const vec3 f = sample_bsdf(n_s, wo, mat, type, side, wi,
                                   pdf_fwd, cos_theta, seed);
        const bool same_hem = same_hemisphere(wi, wo, n_s);
        if (f == vec3(0) || pdf_fwd == 0 || (!same_hem && !mat_transmissive)) {
            break;
        }
        throughput *= f * abs(cos_theta) / pdf_fwd;

        pdf_rev = pdf_fwd;
        if (!mat_specular) {
            pdf_rev = bsdf_pdf(mat, n_s, wi, wo);
        }
        if (pdf_rev > 0.) {
            pdf_rev *= abs(dot(vtx(prev, n_s), wo)) / (wo_len * wo_len);
        }
        vtx_assign(prev, pdf_rev, pdf_rev);
        ray_pos = offset_ray(payload.pos, n_g);
    }
#undef vtx
#undef vtx_assign
    return b;
}

int bdpt_generate_light_subpath(int max_depth) {
    uint light_idx;
    uint light_triangle_idx;
    uint light_material_idx;
    vec2 uv_unused;
    Light light;
    TriangleRecord record;
    Material light_mat;
    float pdf_pos, pdf_dir;
    vec3 wi;
    const vec3 Le =
        sample_light_Le(pc_ray.num_lights, pc_ray.light_triangle_count,
                        light_idx, light_triangle_idx, light_material_idx,
                        light, record, light_mat, pdf_pos, seed, wi, pdf_dir);
    if (pdf_dir <= 0) {
        return 0;
    }

    light_verts.d[bdpt_path_idx + 0].pos = record.pos;
    light_verts.d[bdpt_path_idx + 0].n_s = record.n_s;
    light_verts.d[bdpt_path_idx + 0].material_idx = light_material_idx;
    light_verts.d[bdpt_path_idx + 0].light_idx = light_idx;
    light_verts.d[bdpt_path_idx + 0].area = 1.0 / record.triangle_pdf;
    light_verts.d[bdpt_path_idx + 0].delta = 0;

    light_verts.d[bdpt_path_idx + 0].dir = wi;
    light_verts.d[bdpt_path_idx + 0].pdf_fwd = pdf_pos;

    vec3 throughput = Le * abs(dot(record.n_s, wi)) /
                      (pdf_dir * light_verts.d[bdpt_path_idx + 0].pdf_fwd);
    light_verts.d[bdpt_path_idx + 0].throughput = Le;

    return bdpt_random_walk(max_depth - 1, throughput, pdf_dir, 0) + 1;
}

int bdpt_generate_camera_subpath(const vec2 d, const vec3 origin, int max_depth,
                                 const float cam_area) {
    camera_verts.d[bdpt_path_idx].pos = origin;
    camera_verts.d[bdpt_path_idx].dir = vec3(sample_camera(d));
    camera_verts.d[bdpt_path_idx].area = cam_area;
    camera_verts.d[bdpt_path_idx].throughput = vec3(1.0);
    camera_verts.d[bdpt_path_idx].delta = 0;
    camera_verts.d[bdpt_path_idx].n_s =
        vec3(-ubo.inv_view * vec4(0, 0, 1, 0));
    float cos_theta = dot(camera_verts.d[bdpt_path_idx].dir,
                          camera_verts.d[bdpt_path_idx].n_s);
    float pdf =
        1 / (cam_area * screen_size * cos_theta * cos_theta * cos_theta);
    return bdpt_random_walk(max_depth - 1, vec3(1), pdf, 1) + 1;
}

float calc_mis_weight(int s, int t, const in PathVertex s_fwd_pdf) {
#define cam_vtx(i) camera_verts.d[bdpt_path_idx + i]
#define light_vtx(i) light_verts.d[bdpt_path_idx + i]
#define remap0(i) (i != 0. ? i : 1.)
    bool s_0_changed = false;
    float s_0_pdf;
    vec3 s_0_pdf_pos;
    vec3 s_0_pdf_nrm;
    bool t_0_changed = false;
    uint idx_1 = -1;
    float idx_1_val;
    uint idx_2 = -1;
    float idx_2_val;
    uint idx_3 = -1;
    float idx_3_val;
    uint idx_4 = -1;
    float idx_4_val;
    uint delta_t_old;
    uint delta_s_old;
    if (s + t == 2) {
        return 1.0;
    }
    if (s == 1) {
        s_0_pdf = light_vtx(0).pdf_fwd;
        s_0_pdf_pos = light_vtx(0).pos;
        s_0_pdf_nrm = light_vtx(0).n_s;
        light_vtx(0).pdf_fwd = s_fwd_pdf.pdf_fwd;
        light_vtx(0).pos = s_fwd_pdf.pos;
        light_vtx(0).n_s = s_fwd_pdf.n_s;
        s_0_changed = true;
    }
    if (t == 1) {
        s_0_pdf = cam_vtx(0).pdf_fwd;
        s_0_pdf_pos = cam_vtx(0).pos;
        s_0_pdf_nrm = cam_vtx(0).n_s;
        cam_vtx(0).pdf_fwd = s_fwd_pdf.pdf_fwd;
        cam_vtx(0).pos = s_fwd_pdf.pos;
        cam_vtx(0).n_s = s_fwd_pdf.n_s;
        t_0_changed = true;
    }
    if (t > 0) {
        idx_1_val = cam_vtx(t - 1).pdf_rev;
        idx_1 = t;
        delta_t_old = cam_vtx(t - 1).delta;
        cam_vtx(t - 1).delta = 0;
        if (s > 0) {
            vec3 dir = (cam_vtx(t - 1).pos - light_vtx(s - 1).pos);
            float dir_len = length(dir);
            dir /= dir_len;
            const Material mat = load_material(
                light_vtx(s - 1).material_idx, light_vtx(s - 1).uv);
            vec3 wo = normalize(light_vtx(s - 2).pos - light_vtx(s - 1).pos);
            float pdf_rev;
            if (s >= 2) {
                wo = normalize(light_vtx(s - 2).pos - light_vtx(s - 1).pos);
                pdf_rev = bsdf_pdf(mat, light_vtx(s - 1).n_s, wo, dir);
            }
            if (s < 2) {
                const Light light = lights[light_vtx(s - 1).light_idx];
                pdf_rev = light_pdf(light, light_vtx(s - 1).n_s, dir);
            }
            cam_vtx(t - 1).pdf_rev = pdf_rev;
            if (cam_vtx(t - 1).pdf_rev != 0) {
                cam_vtx(t - 1).pdf_rev *=
                    abs(dot(dir, cam_vtx(t - 1).n_s)) /
                    (dir_len * dir_len);
            }
        } else {
            cam_vtx(t - 1).pdf_rev =
                1.0 / (pc_ray.light_triangle_count * cam_vtx(t - 1).area);
        }
    }
    if (t > 1) {
        idx_2_val = cam_vtx(t - 2).pdf_rev;
        idx_2 = t;
        vec3 dir = (cam_vtx(t - 2).pos - cam_vtx(t - 1).pos);
        float dir_len = length(dir);
        dir /= dir_len;
        if (s > 0) {
            const Material mat =
                load_material(cam_vtx(t - 1).material_idx, cam_vtx(t - 1).uv);
            vec3 wo = normalize(light_vtx(s - 1).pos - cam_vtx(t - 1).pos);
            cam_vtx(t - 2).pdf_rev =
                bsdf_pdf(mat, cam_vtx(t - 1).n_s, wo, dir);
            if (cam_vtx(t - 2).pdf_rev != 0) {
                cam_vtx(t - 2).pdf_rev *=
                    abs(dot(dir, cam_vtx(t - 2).n_s)) /
                    (dir_len * dir_len);
            }
        } else {
            // Assumption: All lights are finite
            float cos_x = dot(cam_vtx(t - 1).n_s, dir);
            float cos_y = dot(cam_vtx(t - 2).n_s, dir);
            cam_vtx(t - 2).pdf_rev =
                abs(cos_x * cos_y) / (PI * dir_len * dir_len);
        }
    }
    if (s > 0) {
        // t is always > 0
        idx_3_val = light_vtx(s - 1).pdf_rev;
        idx_3 = s;
        delta_s_old = light_vtx(s - 1).delta;
        light_vtx(s - 1).delta = 0;
        vec3 dir = (light_vtx(s - 1).pos - cam_vtx(t - 1).pos);
        float dir_len = length(dir);
        dir /= dir_len;
        if (t == 1) {
            float cos_theta = dot(cam_vtx(0).n_s, dir);
            float pdf = 1.0 / (cam_vtx(0).area * screen_size * cos_theta *
                               cos_theta * cos_theta);
            pdf *= abs(dot(dir, light_vtx(s - 1).n_s)) /
                   (dir_len * dir_len);
            light_vtx(s - 1).pdf_rev = pdf;
        } else {
            vec3 wo = normalize(cam_vtx(t - 2).pos - cam_vtx(t - 1).pos);
            const Material mat =
                load_material(cam_vtx(t - 1).material_idx, cam_vtx(t - 1).uv);
            light_vtx(s - 1).pdf_rev =
                bsdf_pdf(mat, cam_vtx(t - 1).n_s, wo, dir);
            if (light_vtx(s - 1).pdf_rev != 0) {
                light_vtx(s - 1).pdf_rev *=
                    abs(dot(dir, light_vtx(s - 1).n_s)) /
                    (dir_len * dir_len);
            }
        }
    }
    if (s > 1) {
        idx_4_val = light_vtx(s - 2).pdf_rev;
        idx_4 = s;
        vec3 dir = (light_vtx(s - 2).pos - light_vtx(s - 1).pos);
        vec3 wo = normalize(cam_vtx(t - 1).pos - light_vtx(s - 1).pos);
        float dir_len = length(dir);
        dir /= dir_len;
        const Material mat =
            load_material(light_vtx(s - 1).material_idx, light_vtx(s - 1).uv);
        light_vtx(s - 2).pdf_rev =
            bsdf_pdf(mat, light_vtx(s - 1).n_s, wo, dir);
        if (light_vtx(s - 2).pdf_rev != 0) {
            light_vtx(s - 2).pdf_rev *=
                abs(dot(dir, light_vtx(s - 2).n_s)) /
                (dir_len * dir_len);
        }
    }
    float sum_ri = 0.;
    float weight = 1.0;
    for (int i = t - 1; i > 0; i--) {
        weight *= remap0(cam_vtx(i).pdf_rev) / remap0(cam_vtx(i).pdf_fwd);
        if (cam_vtx(i).delta == 0 && cam_vtx(i - 1).delta == 0) {
            sum_ri += weight;
        }
    }
    weight = 1.0;
    for (int i = s - 1; i >= 0; i--) {
        weight *= remap0(light_vtx(i).pdf_rev) / remap0(light_vtx(i).pdf_fwd);
        bool delta_prev = i > 0 ? light_vtx(i - 1).delta == 1 : false;
        if (light_vtx(i).delta == 0 && !delta_prev) {
            sum_ri += weight;
        }
    }

    if (s_0_changed) {
        light_vtx(0).pdf_fwd = s_0_pdf;
        light_vtx(0).pos = s_0_pdf_pos;
        light_vtx(0).n_s = s_0_pdf_nrm;
    }
    if (t_0_changed) {
        cam_vtx(0).pdf_fwd = s_0_pdf;
        cam_vtx(0).pos = s_0_pdf_pos;
        cam_vtx(0).n_s = s_0_pdf_nrm;
    }
    if (idx_1 != -1) {
        cam_vtx(idx_1 - 1).pdf_rev = idx_1_val;
        cam_vtx(idx_1 - 1).delta = delta_t_old;
    }
    if (idx_2 != -1) {
        cam_vtx(idx_2 - 2).pdf_rev = idx_2_val;
    }
    if (idx_3 != -1) {
        light_vtx(idx_3 - 1).pdf_rev = idx_3_val;
        light_vtx(idx_3 - 1).delta = delta_s_old;
    }
    if (idx_4 != -1) {
        light_vtx(idx_4 - 2).pdf_rev = idx_4_val;
    }
#undef cam_vtx
#undef light_vtx
    return 1 / (1 + sum_ri);
}

vec3 bdpt_connect_cam(int s, out ivec2 coords) {
#define cam_vtx(i) camera_verts.d[bdpt_path_idx + i]
#define light_vtx(i) light_verts.d[bdpt_path_idx + i]
    PathVertex sampled;
    vec3 throughput = vec3(1.0);
    vec3 L = vec3(0);
    vec3 dir = cam_vtx(0).pos - light_vtx(s - 1).pos;
    float len = length(dir);
    dir /= len;
    float cos_y = dot(dir, light_vtx(s - 1).n_s);
    float cos_theta = dot(cam_vtx(0).n_s, -dir);
    if (cos_theta <= 0.) {
        return vec3(0);
    }
    float cos_3_theta = cos_theta * cos_theta * cos_theta;
    const float cam_pdf_ratio =
        abs(cos_y) / (cam_vtx(0).area * cos_3_theta * len * len);

    vec3 ray_origin =
        offset_ray2(light_vtx(s - 1).pos, light_vtx(s - 1).n_s);
    const Material mat =
        load_material(light_vtx(s - 1).material_idx, light_vtx(s - 1).uv);
    const vec3 wo = normalize(light_vtx(s - 2).pos - light_vtx(s - 1).pos);
    const vec3 f = eval_bsdf(mat, wo, dir, light_vtx(s - 1).n_s);
    if (f == vec3(0)) {
        return L;
    }
    if (cam_pdf_ratio > 0.0) {
        any_hit_payload.hit = 1;
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, ray_origin, 0, dir, len - EPS, 1);

        if (any_hit_payload.hit == 0) {
            sampled.pos = cam_vtx(0).pos;
            sampled.n_s = cam_vtx(0).n_s;
            // We / pdf_we * abs(cos_theta) = cam_pdf_ratio
            L = light_vtx(s - 1).throughput * cam_pdf_ratio * f / screen_size;
        }
    }
    dir = -dir;
    vec4 target = ubo.view * vec4(dir.x, dir.y, dir.z, 0);
    target /= target.z;
    target = -ubo.projection * target;
    coords = ivec2(0.5 * (1 + target.xy) * gl_LaunchSizeEXT.xy - 0.5);
    if (coords.x < 0 || coords.x >= gl_LaunchSizeEXT.x || coords.y < 0 ||
        coords.y >= gl_LaunchSizeEXT.y ||
        dot(dir, cam_vtx(0).n_s) < 0) {
        return vec3(0);
    }
    float mis_weight = 1.0;
    if (luminance(L) != 0.) {
        mis_weight = calc_mis_weight(s, 1, sampled);
    }

    return mis_weight * L;
#undef cam_vtx
#undef light_vtx
}

vec3 bdpt_connect(int s, int t) {
#define cam_vtx(i) camera_verts.d[bdpt_path_idx + i]
#define light_vtx(i) light_verts.d[bdpt_path_idx + i]
    vec3 L = vec3(0);
    PathVertex s_fwd_pdf;
    if (s == 0) {
        // Pure camera path
        uint mat_idx = cam_vtx(t - 1).material_idx;
        Material mat = materials.m[mat_idx];
        if (mat_idx != -1) {
            L = mat.emissive_factor * cam_vtx(t - 1).throughput;
        }
    } else if (s == 1) {
        // Connect from camera path to light(aka NEE)
        uint light_idx;
        uint light_triangle_idx;
        uint light_material_idx;
        vec2 uv_unused;
        Light light;
        TriangleRecord record;
        Material light_mat;
        const vec3 Le =
            sample_light(cam_vtx(t - 1).pos, pc_ray.num_lights, light_idx,
                         light_triangle_idx, light_material_idx, light, record,
                         light_mat, seed);
        // const TriangleRecord record =
        //     sample_area_light(light_idx, light_triangle_idx,
        //     light_material_idx,
        //                       light, seed, pc_ray.num_lights);
        // const Material light_mat =
        //     load_material(light_material_idx, uv_unused);
        vec3 wi = record.pos - cam_vtx(t - 1).pos;
        float ray_len = length(wi);
        float ray_len_sqr = ray_len * ray_len;
        wi /= ray_len;
        const float cos_x = abs(dot(wi, cam_vtx(t - 1).n_s));
        const vec3 ray_origin =
            offset_ray2(cam_vtx(t - 1).pos, cam_vtx(t - 1).n_s);
        any_hit_payload.hit = 1;
        vec3 wo = normalize(cam_vtx(t - 2).pos - cam_vtx(t - 1).pos);
        // TODO
        const Material mat =
            load_material(cam_vtx(t - 1).material_idx, cam_vtx(t - 1).uv);
        const vec3 f = eval_bsdf(mat, wo, wi, cam_vtx(t - 1).n_s);
        if (f != vec3(0)) {
            traceRayEXT(tlas,
                        gl_RayFlagsTerminateOnFirstHitEXT |
                            gl_RayFlagsSkipClosestHitShaderEXT,
                        0xFF, 1, 0, 1, ray_origin, 0, wi, ray_len - EPS, 1);
            const bool visible = any_hit_payload.hit == 0;
            if (visible) {
                float cos_y = abs(dot(-wi, record.n_s));
                float G = abs(cos_x * cos_y) / ray_len_sqr;
                float pdf_light =
                    record.triangle_pdf / pc_ray.light_triangle_count;

                s_fwd_pdf.pdf_fwd = pdf_light;
                s_fwd_pdf.pos = record.pos;
                s_fwd_pdf.n_s = record.n_s;
                vec3 throughput = Le / pdf_light;
                L = cam_vtx(t - 1).throughput * f * G * throughput;
            }
        }
    } else {
        // Eval G
        vec3 n_s = light_vtx(s - 1).n_s;
        vec3 n_t = cam_vtx(t - 1).n_s;
        vec3 d = light_vtx(s - 1).pos - cam_vtx(t - 1).pos;
        float len = length(d);
        d /= len;
        float G = (dot(n_s, -d)) * (dot(n_t, d)) / (len * len);
        if (G > 0) {
            const Material mat_1 =
                load_material(cam_vtx(t - 1).material_idx, cam_vtx(t - 1).uv);
            const Material mat_2 = load_material(
                light_vtx(s - 1).material_idx, light_vtx(s - 1).uv);

            vec3 wo_1 = normalize(cam_vtx(t - 2).pos - cam_vtx(t - 1).pos);
            vec3 wo_2 = normalize(light_vtx(s - 2).pos - light_vtx(s - 1).pos);
            const vec3 brdf1 =
                eval_bsdf(mat_1, wo_1, d, cam_vtx(t - 1).n_s);
            const vec3 brdf2 =
                eval_bsdf(mat_2, wo_2, -d, light_vtx(t - 1).n_s);
            if (brdf1 != vec3(0) && brdf2 != vec3(0)) {
                vec3 ray_origin =
                    offset_ray2(cam_vtx(t - 1).pos, cam_vtx(t - 1).n_s);
                // Check visibility
                any_hit_payload.hit = 1;
                traceRayEXT(tlas,
                            gl_RayFlagsTerminateOnFirstHitEXT |
                                gl_RayFlagsSkipClosestHitShaderEXT,
                            0xFF, 1, 0, 1, ray_origin, 0, d, len - EPS, 1);
                const bool visible = any_hit_payload.hit == 0;
                if (visible) {
                    L = light_vtx(s - 1).throughput * G * brdf1 * brdf2 *
                        cam_vtx(t - 1).throughput;
                }
            }
        }
    }
#undef cam_vtx
#undef light_vtx
    float mis_weight = 1.0f;
    if (luminance(L) != 0.) {
        mis_weight = calc_mis_weight(s, t, s_fwd_pdf);
        L *= mis_weight;
    }
    return vec3(L);
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));

    vec3 col = vec3(0);
    vec4 area_int = (ubo.inv_projection * vec4(2. / gl_LaunchSizeEXT.x,
                                               2. / gl_LaunchSizeEXT.y, 0, 1));
    area_int /= (area_int.w);
    const float cam_area = abs(area_int.x * area_int.y);

    int num_light_paths = bdpt_generate_light_subpath(pc_ray.max_depth + 1);
    int num_cam_paths = bdpt_generate_camera_subpath(
        d, origin.xyz, pc_ray.max_depth + 1, cam_area);
    for (int t = 1; t <= num_cam_paths; t++) {
        for (int s = 0; s <= num_light_paths; s++) {
            int depth = s + t - 2;
            if (depth > (pc_ray.max_depth - 1) || depth < 0 ||
                (s == 1 && t == 1)) {
                continue;
            }
            if (t == 1) {
                ivec2 coords;
                vec3 splat_col = bdpt_connect_cam(s, coords);
                if (luminance(splat_col) > 0) {
                    uint idx = coords.x * gl_LaunchSizeEXT.y + coords.y;
                    tmp_col.d[idx] += splat_col;
                }
            } else {
                col += bdpt_connect(s, t);
            }
        }
    }
    vec3 splat_img = tmp_col.d[pixel_idx];
    col += splat_img;
    tmp_col.d[pixel_idx] = vec3(0);
    if (isnan(luminance(col))) {
        debugPrintfEXT("nan\n");
        return;
    }
    if (pc_ray.frame_num > 0) {
        float w = 1. / float(pc_ray.frame_num + 1);
        vec3 old_col = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        // imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
        imageStore(image, ivec2(gl_LaunchIDEXT.xy),
                   vec4(mix(old_col, col, w), 1.f));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(col, 1.f));
    }
}