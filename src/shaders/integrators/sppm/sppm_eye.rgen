#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_shader_atomic_float : require

#include "../../commons.glsl"
layout(push_constant) uniform _PushConstantRay { PushConstantRay pc_ray; };
// SPPM buffers
layout(buffer_reference, scalar) buffer SPPMData_ { SPPMData d[]; };
layout(buffer_reference, scalar) buffer AtomicData_ { AtomicData d; };
layout(buffer_reference, scalar) buffer HashData_ { HashData d[]; };
layout(buffer_reference, scalar) buffer PhotonData_ { PhotonHash d[]; };

SPPMData_ sppm_data = SPPMData_(scene_desc.sppm_data_addr);
AtomicData_ atomic_data = AtomicData_(scene_desc.atomic_data_addr);
HashData_ hash_data = HashData_(scene_desc.hash_addr);
PhotonData_ photons = PhotonData_(scene_desc.photon_addr);

uint screen_size = gl_LaunchSizeEXT.x * gl_LaunchSizeEXT.y;
const uint flags = gl_RayFlagsOpaqueEXT;
const float tmin = 0.001;
const float tmax = 10000.0;
#define RR_MIN_DEPTH 3
uint pixel_idx = (gl_LaunchIDEXT.x * gl_LaunchSizeEXT.y + gl_LaunchIDEXT.y);
uvec4 seed = init_rng(gl_LaunchIDEXT.xy, gl_LaunchSizeEXT.xy,
                      pc_ray.frame_num ^ pc_ray.random_num);

vec3 normalize_grid(vec3 p, vec3 min_bnds, vec3 max_bnds) {
    return (p - min_bnds) / (max_bnds - min_bnds);
}

ivec3 get_grid_idx(vec3 p, vec3 min_bnds, vec3 max_bnds, ivec3 grid_res) {
    ivec3 res = ivec3(normalize_grid(p, min_bnds, max_bnds) * grid_res);
    clamp(res, vec3(0), grid_res - vec3(1));
    return res;
}

vec3 uniform_sample_light(const Material mat, const vec3 pos,
                          const bool side, const vec3 shading_nrm,
                          const vec3 wo, const bool is_specular) {
    vec3 res = vec3(0);
    // Sample light
    uint light_idx;
    uint light_triangle_idx;
    uint light_material_idx;
    Light light;
    TriangleRecord record;
    Material light_mat;
    const vec3 Le = sample_light(payload.pos, pc_ray.num_lights, light_idx,
                                 light_triangle_idx, light_material_idx, light,
                                 record, light_mat, seed);
    // vec2 uv_unused;
    // const Material light_mat =
    //     load_material(light_material_idx, uv_unused);
    vec3 wi = record.pos - payload.pos;
    const float wi_len = length(wi);
    wi /= wi_len;
    float bsdf_pdf;
    float cos_x = dot(shading_nrm, wi);
    const uint props = is_specular ? BSDF_ALL : BSDF_ALL & ~BSDF_SPECULAR;
    vec3 f = eval_bsdf(shading_nrm, wo, mat, 0, side, wi, bsdf_pdf, cos_x);
    float pdf_light;
    if (f != vec3(0)) {
        any_hit_payload.hit = 1;
        traceRayEXT(tlas,
                    gl_RayFlagsTerminateOnFirstHitEXT |
                        gl_RayFlagsSkipClosestHitShaderEXT,
                    0xFF, 1, 0, 1, pos, 0, wi, wi_len - EPS, 1);
        bool visible = any_hit_payload.hit == 0;
        float g = abs(dot(record.triangle_normal, -wi)) / (wi_len * wi_len);
        if (pc_ray.use_area_sampling == 0) {
            pdf_light = record.triangle_pdf / g;
        } else {
            bsdf_pdf *= g;
            pdf_light = record.triangle_pdf;
        }
        if (visible && pdf_light > 0) {
            const float mis_weight = 1 / (1 + bsdf_pdf / pdf_light);
            res += f * abs(cos_x) * mis_weight *
                   (pc_ray.use_area_sampling == 1 ? g : 1) * Le / pdf_light;
        }
    }

    if (light.light_flags == LIGHT_AREA) {
        // Sample BSDF
        f = sample_bsdf(shading_nrm, wo, mat, 0, side, wi, bsdf_pdf, cos_x,
                        seed);
        traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, pos, tmin, wi, tmax, 0);
        if (payload.material_idx == light_material_idx &&
            payload.triangle_idx == light_triangle_idx) {
            const float wi_len = length(payload.pos - pos);
            float g = abs(dot(payload.shading_nrm, -wi)) / (wi_len * wi_len);
            if (pc_ray.use_area_sampling == 1) {
                bsdf_pdf *= g;

            } else {
                pdf_light = record.triangle_pdf / g;
            }
            const float mis_weight = 1. / (1 + pdf_light / bsdf_pdf);
            res += f * abs(cos_x) * (pc_ray.use_area_sampling == 1 ? g : 1) *
                   mis_weight * Le / bsdf_pdf;
        }
    }

    return res;
}

void main() {
    const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;
    vec4 origin = ubo.inv_view * vec4(0, 0, 0, 1);
    vec4 target = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
    vec3 direction = vec3(sample_camera(d));
    vec4 area_int = (ubo.inv_projection * vec4(2. / gl_LaunchSizeEXT.x,
                                               2. / gl_LaunchSizeEXT.y, 0, 1));
    area_int /= (area_int.w);
    const float cam_area = abs(area_int.x * area_int.y);

    vec3 throughput = vec3(1.);
    vec3 phi_total = vec3(0);
    uint M = 0;
    bool specular = false;
    bool glossy = false;
    for (int d = 0;; d++) {
        traceRayEXT(tlas, flags, 0xFF, 0, 0, 0, origin.xyz, tmin, direction,
                    tmax, 0);
        const bool found_isect = payload.material_idx != -1;
        if (!found_isect) {
            sppm_data.d[pixel_idx].col += throughput * pc_ray.sky_col;
            break;
        }
        const uint mat_idx = payload.material_idx;
        const vec2 mat_uv = payload.uv;
        const Material hit_mat = load_material(mat_idx, mat_uv);
        if (d == 0 || specular) {
            sppm_data.d[pixel_idx].col += throughput * hit_mat.emissive_factor;
        }
        const vec3 wo = -direction;
        vec3 shading_nrm = payload.shading_nrm;
        float cos_wo = dot(wo, shading_nrm);
#if 1
        vec3 geometry_nrm = payload.geometry_nrm;
        bool side = true;
        if (dot(payload.geometry_nrm, wo) < 0.)
            geometry_nrm = -geometry_nrm;
        if (cos_wo < 0.) {
            cos_wo = -cos_wo;
            shading_nrm = -shading_nrm;
            side = false;
        }
#endif
        const vec3 pos = payload.pos;
        const vec3 pos_moved = offset_ray(pos, shading_nrm);
        if ((hit_mat.bsdf_props & BSDF_SPECULAR) == 0) {
            const float light_pick_pdf = 1. / pc_ray.light_triangle_count;
            sppm_data.d[pixel_idx].col +=
                throughput *
                uniform_sample_light(hit_mat, pos_moved, side, shading_nrm, wo,
                                     specular) /
                light_pick_pdf;
        }

        specular = (hit_mat.bsdf_props & BSDF_SPECULAR) != 0;
        glossy = hit_mat.bsdf_type == BSDF_GLOSSY;
        origin.xyz = pos_moved;

        const bool mat_diffuse = (hit_mat.bsdf_type & BSDF_DIFFUSE) != 0;
        const bool mat_specular = specular;
        if (mat_diffuse ||
            ((glossy || specular) && d == pc_ray.max_depth - 1)) {

            sppm_data.d[pixel_idx].wo = wo;
            sppm_data.d[pixel_idx].p = pos;
            sppm_data.d[pixel_idx].material_idx = mat_idx;
            sppm_data.d[pixel_idx].uv = mat_uv;
            sppm_data.d[pixel_idx].throughput = throughput;
            sppm_data.d[pixel_idx].shading_nrm = shading_nrm;
            sppm_data.d[pixel_idx].path_len = d;

            break;
        }
        float pdf, cos_theta;
        const vec3 f_sampled = sample_bsdf(shading_nrm, wo, hit_mat, 1, side,
                                           direction, pdf, cos_theta, seed);
        if (pdf == 0 || f_sampled == vec3(0)) {
            break;
        }
        throughput *= f_sampled * abs(cos_theta) / pdf;
        if (d > RR_MIN_DEPTH) {
            float rr_prob = luminance(throughput);
            if (rr_prob < rand(seed))
                break;
            else
                throughput /= rr_prob;
        }
    }
    if (pc_ray.frame_num == 0) {
        sppm_data.d[pixel_idx].radius = pc_ray.ppm_base_radius;
    }
}