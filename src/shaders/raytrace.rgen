#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raystructs.glsl"
#include "commons.h"
layout(location = 0) rayPayloadEXT HitPayload prd;
layout(set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 1, rgba32f) uniform image2D image;
layout(set = 1, binding = 0) uniform SceneUBOBuffer { SceneUBO ubo; };
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };


void main() {
  const vec2 pixel = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixel / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 origin    = ubo.inv_view * vec4(0, 0, 0, 1);
  vec4 target    = ubo.inv_projection * vec4(d.x, d.y, 1, 1);
  vec4 direction = ubo.inv_view * vec4(normalize(target.xyz), 0);

  uint  flags = gl_RayFlagsOpaqueEXT;
  float tmin     = 0.001;
  float tmax     = 10000.0;

  traceRayEXT(topLevelAS,     // acceleration structure
              flags,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              origin.xyz,     // ray origin
              tmin,           // ray min range
              direction.xyz,  // ray direction
              tmax,           // ray max range
              0               // payload (location = 0)
  );
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(prd.hit_value, 1.0));
}
